
//This must be wrong somehow.
u=((z*a-x*c)*c-b*(x*b-y*a))*m+(a*(x*b-y*a)-(y*c-z*b)*c)*n+((y*c-z*b)*b-a*(z*a-x*c))*o
v=(b*z-y*c)*m+(x*c-a*z)*n+(a*y-x*b)*o
w=(y*(x*b-y*a)-(z*a-x*c)*z)*m+((y*c-z*b)*z-x*(x*b-y*a))*n+(x*(z*a-x*c)-(y*c-z*b)*y)*o

//Ship direction: (dir)  [x, y, z] //Point B - Point A
//Destination:    (dest) [m, n, o] //Dest - Point A        (in real space)
//Destination:    (dest) [u, v, w] (ship orn space)
//Up:                    [a, b, c]

//    Transform    . dest(ship orientated) = dest(real)
// WRONG [ x  yc-zb  a ]   [ ? ]   [ m ]
// WRONG [ y  za-xc  b ]   [ ? ] = [ n ]
// WRONG [ z  xb-ya  c ]   [ ? ]   [ o ]
//
// Need to find inverse of T
//  Need to find cofactor of T
// WRONG            [ x  yc-zb  a ]   [  (za-xc)c-b(xb-ya)  -yc+bz   y(xb-ya)-(za-xc)z ]
// WRONG     cofact [ y  za-xc  b ] = [ -(yc-zb)c+a(xb-ya)   xc-az  -x(xb-ya)+(yc-zb)z ]
// WRONG            [ z  xb-ya  c ]   [  (yc-zb)b-a(za-xc)  -xb+ay   x(za-xc)-(yc-zb)y ]

//Turns out I done [x y z] X [a b c], should've been other way around!!
//    Transform    . dest(ship orientated) = dest(real)
// FIXED [ x  zb-yc  a ]   [ ? ]   [ m ]
// FIXED [ y  xc-za  b ]   [ ? ] = [ n ]
// FIXED [ z  ya-xb  c ]   [ ? ]   [ o ]
//
//             [          ]   [ (xc-za)c-b(ya-xb)     -yc+bz      y(ya-xb)-(xc-za)z ]
//      cofact [    ^^    ] = [-(zb-yc)c+a(ya-xb)      xc-az     -x(ya-xb)+(zb-yc)z ]
//             [          ]   [ (zb-yc)b-a(xc-za)     -xb+ay      x(xc-za)-(zb-yc)y ]
// det should be 1, no need to div

//transpose 

// [ (xc-za)c-b(ya-xb)     -yc+bz      y(ya-xb)-(xc-za)z ]T
// [-(zb-yc)c+a(ya-xb)      xc-az     -x(ya-xb)+(zb-yc)z ]
// [ (zb-yc)b-a(xc-za)     -xb+ay      x(xc-za)-(zb-yc)y ]
//
// [ (xc-za)c-b(ya-xb) -(zb-yc)c+a(ya-xb) (zb-yc)b-a(xc-za) ]
// [        -yc+bz              xc-az           -xb+ay      ]
// [ y(ya-xb)-(xc-za)z -x(ya-xb)+(zb-yc)z x(xc-za)-(zb-yc)y ]

//What I REALLY what to do
// [ u ]   [ (xc-za)c-b(ya-xb) -(zb-yc)c+a(ya-xb) (zb-yc)b-a(xc-za) ]   [ m ]
// [ v ] = [        -yc+bz              xc-az           -xb+ay      ] * [ n ]
// [ w ]   [ y(ya-xb)-(xc-za)z -x(ya-xb)+(zb-yc)z x(xc-za)-(zb-yc)y ]   [ o ]

// [ u ]   [ (x*c-z*a)*c-b*(y*a-x*b) -(z*b-y*c)*c+a*(y*a-x*b) (z*b-y*c)*b-a*(x*c-z*a) ]   [ m ]
// [ v ] = [        -y*c+b*z              x*c-a*z           -x*b+a*y      ]             * [ n ]
// [ w ]   [ y*(y*a-x*b)-(x*c-z*a)*z -x*(y*a-x*b)+(z*b-y*c)*z x*(x*c-z*a)-(z*b-y*c)*y ]    [ o ]
u=m*((x*c-z*a)*c-b*(y*a-x*b))+n*(a*(y*a-x*b)-(z*b-y*c)*c)+o*((z*b-y*c)*b-a*(x*c-z*a))
v=m*(b*z-y*c)+n*(x*c-a*z)+o*(a*y-x*b)
w=m*(y*(y*a-x*b)-(x*c-z*a)*z)+n*((z*b-y*c)*z-x*(y*a-x*b))+o*(x*(x*c-z*a)-(z*b-y*c)*y)

//Forgot to transpose this 
// [ u ]   [ (xc-za)c-b(ya-xb)     -yc+bz      y(ya-xb)-(xc-za)z ]   [ m ]
// [ v ] = [-(zb-yc)c+a(ya-xb)      xc-az     -x(ya-xb)+(zb-yc)z ] * [ n ]
// [ w ]   [ (zb-yc)b-a(xc-za)     -xb+ay      x(xc-za)-(zb-yc)y ]   [ o ]
//
// [ u ]   [ (x*c-z*a)*c-b*(y*a-x*b)     -y*c+b*z      y*(y*a-x*b)-(x*c-z*a)*z ]   [ m ]
// [ v ] = [-(z*b-y*c)*c+a*(y*a-x*b)      x*c-a*z     -x*(y*a-x*b)+(z*b-y*c)*z ] * [ n ]
// [ w ]   [ (z*b-y*c)*b-a*(x*c-z*a)     -x*b+a*y      x*(x*c-z*a)-(z*b-y*c)*y ]   [ o ]


//also wrong, forgot to transpose.
u=m*((x*c-z*a)*c-b*(y*a-x*b))+n*(b*z-y*c)+o*(y*(y*a-x*b)-(x*c-z*a)*z)   //how much forward
v=m*(a*(y*a-x*b)-(z*b-y*c)*c)+n*(x*c-a*z)+o*((z*b-y*c)*z-x*(y*a-x*b))   //how much left
w=m*((z*b-y*c)*b-a*(x*c-z*a))+n*(a*y-x*b)+o*(x*(x*c-z*a)-(z*b-y*c)*y)   //how much up

//nope
// [ u ]   [ x  zb-yc  a ]   [ m ]
// [ v ] = [ y  xc-za  b ] * [ n ]
// [ w ]   [ z  ya-xb  c ]   [ o ]

//no
u=m*(x)+n*(zb-yc)+o*(a)
v=m*(y)+n*(xc-za)+o*(b)
w=m*(z)+n*(ya-xb)+o*(c)

//--+----|----+----|----+----|----+----|----+----|----+----|----+----|

//--+----|----+----|----+----|----+----|----+----|----+----|----+----|
x=0 y=0 z=0 i=5 goto 1+:AUTO
x-=:X y-=:Y z-=:Z goto 2+(i--==0)
j=10 i=5 m=:DX+x/5 n=:DY+y/5 o=:DZ+z/5
goto 4+(j--==0)
x+=:X y+=:Y z+=:Z goto 5+(i--==0)
a=-x*z b=-y*z c=x^2+y^2            v=sqrt(a^2+b^2+c^2) a/=v b/=v c/=v
v=sqrt(x^2+y^2+z^2) x/=v y/=v z/=v v=sqrt(m^2+n^2+o^2) m/=v n/=v o/=v
p=cos(:r) s=sin(:r) q=1-p at=(p+x*x*q)*a+(x*y*q-z*s)*b+(x*z*q+y*s)*c
bt=(y*x*q+z*s)*a+(p+y*y*q)*b+(y*z*q-x*s)*c
ct=(z*x*q-y*s)*a+(z*y*q+x*s)*b+(p+z*z*q)*c a=at b=bt c=ct
u=((z*a-x*c)*c-b*(x*b-y*a))*m+(a*(x*b-y*a)-(y*p-z*b)*c)*n
u+=((y*c-z*b)*b-a*(z*a-x*c))*o v=(b*z-y*c)*m+(x*c-a*z)*n+(a*y-x*b)*o
w=(y*(x*b-y*a)-(z*a-x*c)*z)*m+((y*c-z*b)*z-x*(x*b-y*a))*n
w+=(x*(z*a-x*c)-(y*c-z*b)*y)*o du=u-lu dv=v-lv dw=w-lw lu=u lv=v lw=w
err=180-atan(dv/dw)-(dw<0)*360 //:r-=(err-(ly<0)*180-(lp>0)*90+(lp<0)*90)*((lp+ly)!=0)

j=20 i=10 ly=0 lp=0 goto 20-2*(u>-0.8)
if v>w then ly=i-2*i*(v<0) else lp=i-2*i*(w<0) end
:yaw=ly :pitch=lp
:yaw=0 :pitch=0 goto 20+(j--==0)
//After testing v0.3 in the new debug sim env, seen that dest is not being properly projected into SO space

//--+----|----+----|----+----|----+----|----+----|----+----|----+----|  /\  AUTO v0.3


//--+----|----+----|----+----|----+----|----+----|----+----|----+----|  \/  AUTO v0.2
x=0 y=0 z=0 i=5 goto 1+:AUTO
x-=:X y-=:Y z-=:Z goto 2+(i--==0)
j=10 i=5 m=:DX+x/5 n=:DY+y/5 o=:DZ+z/5
goto 4+(j--==0)
x+=:X y+=:Y z+=:Z goto 5+(i--==0)
v=sqrt(x^2+y^2+z^2) x/=v y/=v z/=v v=sqrt(m^2+n^2+o^2) m/=v n/=v o/=v 
a=-x*z b=-y*z c=x^2+y^2            v=sqrt(a^2+b^2+c^2) a/=v b/=v c/=v       //maybe move up construction before dir normalisation
p=cos(:r) s=sin(:r) q=1-p at=(p+x*x*q)*a+(x*y*q-z*s)*b+(x*z*q+y*s)*c
bt=(y*x*q+z*s)*a+(p+y*y*q)*b+(y*z*q-x*s)*c
ct=(z*x*q-y*s)*a+(z*y*q+x*s)*b+(p+z*z*q)*c a=at b=bt c=ct j=20
u=((z*a-x*c)*c-b*(x*b-y*a))*m+(a*(x*b-y*a)-(y*p-z*b)*c)*n
v=(b*z-y*c)*m+(x*c-a*z)*n+(a*y-x*b)*o
w=(y*(x*b-y*a)-(z*a-x*c)*z)*m+((y*c-z*b)*z-x*(x*b-y*a))*n
w+=(x*(z*a-x*c)-(y*c-z*b)*y)*o u+=((y*c-z*b)*b-a*(z*a-x*c))*o
du=u-lu dv=v-lv dw=w-lw err=180-atan(dv/dw)-(dw<0)*360 lu=u lv=v lw=w
i=10 ly=0 lp=0 :r-=(err-(ly<0)*180-(lp>0)*90+(lp<0)*90)*((lp+ly)!=0)
goto 19-(u>-0.8)
if v>w then ly=i-2*i*(v<0) else lp=i-2*i*(w<0) end
:yaw=ly :pitch=lp goto 18+(j--==0)
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|

//--+----|----+----|----+----|----+----|----+----|----+----|----+----|      AUTO v0.2 
x=0 y=0 z=0 i=5 div=0                                                       //initialise dir [x, y, z], avg cycles (i) & divider
x-=:X y-=:Y z-=:Z div++ goto LINE+(i--==0)                                  //accumulate position (negated) i times
j=10 i=5 m=:DX+x/5 n=:DY+y/5 o=:DZ+z/5                                      //set wait (j), reset avg cycles (i), initialise (dest[RS]) [m, n, o]
goto LINE+(j--==0)                                                          //wait for j ticks
x+=:X y+=:Y z+=:Z goto LINE+(i--==0)                                        //accumulate position i times

v=sqrt(x^2+y^2+z^2) x/=v y/=v z/=v v=sqrt(m^2+n^2+o^2) m/=v n/=v o/=v       //normalise dir, normalise dest[RS]

a=-x*z b=-y*z c=x^2+y^2                                                     //construct UP (0 roll)
c=cos(roll) s=sin(roll) m=1-c                                               //rotate up around dir by roll angle
at = (c+x*x*m)*a + (x*y*m-z*s)*b + (x*z*m+y*s)*c
bt = (y*x*m+z*s)*a + (c+y*y*m)*b + (y*z*m-x*s)*c
ct = (z*x*m-y*s)*a + (z*y*m+x*s)*b + (c+z*z*m)*c
a=at b=bt c=ct
                                                                            //calculate dest[SO] [u,v,w] (using dir [x,y,z] & up [a,b,c])
u=((z*a-x*c)*c-b*(x*b-y*a))*m+(a*(x*b-y*a)-(y*c-z*b)*c)*n+((y*c-z*b)*b-a*(z*a-x*c))*o
v=(b*z-y*c)*m+(x*c-a*z)*n+(a*y-x*b)*o
w=(y*(x*b-y*a)-(z*a-x*c)*z)*m+((y*c-z*b)*z-x*(x*b-y*a))*n+(x*(z*a-x*c)-(y*c-z*b)*y)*o

du=u-lu dv=v-lv dw=w-lw err=180-atan(dv/dw)-(dw<0)*360 lu=u lv=v lw=w       //Get angle of (last dest -> cur dest)
roll-=err-(ly<0)*180-(lp>0)*90+(lp<0)*90                                    //Compare to expected & correct roll

i=10 ly=0 lp=0                                                              //set thrust value & reset last pitch / last yaw
if v>w then ly=i-2*i*(v<0) :yaw=ly else lp=i-2*i*(w<0) :pitch=lp end        //thrust using thrust value in most needed direction, saving what was done
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|