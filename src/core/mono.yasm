#import core/includes/magics.yasm
#import core/includes/transmitterGlobals.yasm

## map above globals with nice functions (T_target & T_magic)
#import core/includes/mappingFunctions.yasm

## get distance from given transmitter
## rem: set signalOffset in setup!
#define getDistance(id) {
    (signalOffset-GLOBAL_TRANSMITTER_id_SIGNAL)
}

#define measurementHandler(nextMessage, axis, nextJump) {
    T_target(A)=nextMessage;
    axis=getDistance(A)^2;
    axis_rate = (axis - last_axis)/4;
    axis_rate_rate = (axis_rate - last_axis_rate)/4;
    last_axis = axis;
    last_axis_rate = axis_rate;
    jump = nextJump;
    goto predict_forward;
}

#define predictForward(axis){
    axis_rate+=axis_rate_rate;
    axis+=axis_rate;
}

##--------------------------- CODE START ---------------------------##
@setup_transmitters_1:
    messageD = MAGICS_TRANSMITTER_PREFIX;
    messageA = messageD + T_magic(A);
    messageB = messageD + T_magic(B);

@setup_transmitters_2:
    messageC = messageD + T_magic(C);
    messageD += T_magic(D);
    signalOffset=999999;
    T_target(A) = messageA

@setup_magics_x:
    MAGICS(X, e, f, g, h, i);

@setup_magics_y:
    MAGICS(Y, j, k, l, m, n);

@setup_magics_z:
    MAGICS(Z, o, p, q, r, s);

@measure_A:
    measurementHandler(messageB, a, measure_B);

@measure_B:
    measurementHandler(messageC, b, measure_C);

@measure_C:
    measurementHandler(messageD, c, measure_D);

@measure_D:
    measurementHandler(messageA, d, measure_A);

@predict_forward:
    predictForward(a);
    predictForward(b);
    predictForward(c);
    predictForward(d);

@calc_position:
    :x = a/e + b/f + c/g + d/h - i;
    :y = a/j + b/k + c/l + d/m - n;
    :z = a/o + b/p + c/q + d/r - s;
    goto jump;